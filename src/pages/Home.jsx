import React, { useState, useEffect } from "react";
import { Card, FormField, Loader } from "../components";

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const BASE_URL = process.env.REACT_APP_BASE_API_URL;

  async function fetchPosts() {
    try {
      const apiRes = await fetch(`${BASE_URL}/v1/post`);
      const resData = await apiRes.json();
      if (resData.success) {
        setAllPosts(resData.data.reverse());
      }
    } catch (error) {
      console.log("Error while fetching posts", error);
    }
  }

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    setLoading(true);
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);
    let inputValue = e.target.value;
    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(inputValue.toLowerCase()) ||
            item.prompt.toLowerCase().includes(inputValue.toLowerCase())
        );
        setSearchedResults(searchResult);
        setLoading(false);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          The Community Show Case
        </h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunnning
          images generated by Digital Canvas
        </p>
      </div>
      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search Posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex items-center justify-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-lg mb-3">
                Showing results for{" "}
                <span className="text-[#222328] text-xl font-semibold">
                  {searchText}
                </span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                />
              ) : (
                <RenderCards data={allPosts} title="No Posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((item) => <Card key={item._id} {...item} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

export default Home;
